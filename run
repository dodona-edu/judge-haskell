#!/bin/sh

# ==============================================================================
# Setup of environment

# Temp files
config="$(mktemp)"      # configuration
result="$(mktemp)"      # result json
compilation="$(mktemp)" # output of compilation

# Saving the configuration from stdin
cat > "$config"

# Directories containing the test files and the judge repository
resources="$(jq -r '.resources' "$config")"
judge="$(jq -r '.judge' "$config")"
workdir="$(jq -r '.workdir' "$config")"
builddir="$(jq -r '.builddir' "$config")"
builddir="${builddir:-/tmp/outputdir}"

# Compilation directory
mkdir -p "$builddir"

trap "rm -rf '$config' '$result' '$compilation' '$execution' '$builddir'" EXIT

# All our code should be executed in the workdir
cd "$workdir"

# Create the Input.hs module, containing the submitted code
echo "module Input where" > "Input.hs"
cat "$(jq -r '.source' "$config")" >> "Input.hs"
cp "$(jq -r '.helper' "$config")" .  2>/dev/null

# Import json helper functions.
dodona() { "$judge/dodona" "$@"; }


# ==============================================================================
# Compiling and running tests.

# Let's get started
dodona start-judgement

# Compiling the judge code
# TODO join with &&?
if ! cabal exec -- ghc -outputdir "$builddir" -i"$judge" "$judge/HUnitJudge.hs" > "$compilation" 2>&1; then
    dodona append-message -f 'code' -p 'staff' -d "$(cat "$compilation")"
    dodona close-judgement -A -e 'internal error' -h 'Compilatie judge mislukt'
    exit 0
fi

if ! cabal exec -- ghc -outputdir "$builddir" -i"$judge" "$judge/QuickCheckJudge.hs" > "$compilation" 2>&1; then
    dodona append-message -f 'code' -p 'staff' -d "$(cat "$compilation")"
    dodona close-judgement -A -e 'internal error' -h 'Compilatie judge mislukt'
    exit 0
fi

if ! cabal exec -- ghc -outputdir "$builddir" -o "$builddir/JSONLinter" -i"$judge" "$judge/JSONLinter.hs" > "$compilation" 2>&1; then
    dodona append-message -f 'code' -p 'staff' -d "$(cat "$compilation")"
    dodona close-judgement -A -e 'internal error' -h 'Compilatie judge mislukt'
    exit 0
fi

# Running the linter
"$builddir/JSONLinter" "Input.hs"

# Compiling the user code.
dodona start-tab -h -t 'Compilatie'
dodona start-context -f 'code' -d 'ghc Input.hs'
if ! cabal exec -- ghc -outputdir "$builddir" "Input.hs" > "$compilation" 2>&1; then
    dodona append-message -f 'code' -p 'student' -d "$(cat "$compilation")"
    dodona close-context -A
    dodona close-tab
    dodona close-judgement -A -e 'compilation error' -h 'Compilatie mislukt'
    exit 0
fi
dodona close-context
dodona close-tab

# Running optional typechecks on the user code.
if [ -f "$resources/typecheck.hs" ]; then
    dodona start-tab -h -t 'Typecheck'
    if ! cabal exec -- ghc -outputdir "$builddir" "$resources/typecheck.hs" -o /dev/null > "$compilation" 2>&1; then
        dodona start-context -d 'Compilatie'
        dodona append-message -f 'code' -p 'student' -d "$(cat "$compilation")"
        dodona close-context -A
        dodona close-tab
        dodona close-judgement -A -e 'compilation error' -h 'Interface niet voldaan'
        exit 0
    fi
    dodona close-tab
fi

# Compiling and running each test file.
for testfile in "$resources"/*_test.hs; do
    [ -f "$testfile" ] || continue
    testbase="$(basename "$testfile")"
    testname="${testbase%_test.hs}"
    tabtitle="$(echo "$testname" | tr '_' ' ')"

    # Compiling the test
    dodona start-tab -h -p 'staff' -t "$tabtitle"
    cp "$testfile" "$testbase"
    if ! cabal exec -- ghc -outputdir "$builddir" -i"$judge" "$testbase" -o runtest > "$compilation" 2>&1; then
        dodona start-context -d 'Compilatie'
        dodona append-message -f 'code' -p 'student' -d "$(cat "$compilation")"
        dodona close-context -A
        dodona close-tab
        dodona close-judgement -A -e 'internal error' -h 'Testcompilatie gefaald'
        exit 0
    fi
    rm "$testbase"
    dodona close-tab

    # Running the test
    dodona start-tab -t "$tabtitle"
    set -e
    ./runtest
    set +e
    rm runtest
    dodona close-tab
done

dodona close-judgement
