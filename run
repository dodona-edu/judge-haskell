#!/bin/sh

# ==============================================================================
# Setup of environment

# Temp files
config="$(mktemp)"      # configuration
order="$(mktemp)"       # order
compilation="$(mktemp)" # output of compilation

# Saving the configuration from stdin
cat > "$config"

# Directories containing the test files and the judge repository
resources="$(jshon -e 'resources' -u < "$config")"
judge="$(jshon -e 'judge' -u < "$config")"
workdir="$(jshon -e 'workdir' -u < "$config")"
builddir="$(mktemp -d -p /dev/shm)"

trap "rm -rf '$config' '$order' '$compilation' '$execution' '$builddir'" EXIT

# Searching the environment
pkgdb="$(find "$HOME/.cabal/store" -name package.db -print -quit)"

# ==============================================================================
# Helper functions for JSON generation
dodona() { "$judge/dodona" "$@"; }

append_message() {
    dodona append-message -f "$1" -p "$2" -d "$3"
}

# ==============================================================================
# Compiling and running tests.

# Let's get started
dodona start-judgement

# Compiling the judge code
cd "$judge"

if ! ghc -outputdir "$builddir" -package-db "$pkgdb" lib/*.hs > "$compilation" 2>&1; then
    dodona append-message -f code -p staff -d "$(cat "$compilation")"
    dodona close-judgement -A -e 'internal error' -h 'Compilatie judge mislukt'
    exit 0
fi

# Create the Input.hs module, containing the submitted code
echo 'module Input where' > lib/Input.hs
cat "$(jshon -e 'source' -u < "$config")" >> lib/Input.hs
cp "$(jshon -e 'helper' -u < "$config")" .  2>/dev/null

# Lint the user code.
runghc -package-db --ghc-arg="$pkgdb" src/JSONLinter.hs lib/Input.hs

# Compiling the user code.
dodona start-tab -h -t 'compilatie'
dodona start-context -f code -d "ghc Input.hs"
if ! ghc -outputdir "$builddir" -package-db "$pkgdb" lib/*.hs > "$compilation" 2>&1; then
    dodona append-message -f code -d "$(cat "$compilation")"
    dodona close-context -A
    dodona close-tab
    dodona close-judgement -A -e 'compilation error' -h 'Compilatie mislukt'
    exit 0
fi
dodona close-context
dodona close-tab

# Copy over non-testfiles
find "$resources" \
    -name '*.hs' \
    -not -name '*_test.hs' \
    -not -name 'typecheck.hs' \
    -exec cp \{\} lib \;

if [ -f "$resources/typecheck.hs" ]; then
    dodona start-tab -h -t 'Typecheck'
    echo 'module Typecheck where' > lib/Typecheck.hs
    cat "$resources/typecheck.hs" >> lib/Typecheck.hs
    if ! ghc -i"$builddir" -outputdir "$builddir" -package-db "$pkgdb" lib/*.hs > "$compilation" 2>&1; then
        dodona start-context -f plain -d 'Compilatie'
        dodona append-message -f code -d "$(cat "$compilation")"
        dodona close-context -A
        dodona close-tab
        dodona close-judgement -A -e 'compilation error' -h 'Interface niet voldaan'
        exit 0
    fi
    dodona close-tab
fi

# Compiling and running each test file.
if [ -f "$resources/ordered_tests" ]
then sed "s|^|$resources/|" < "$resources/ordered_tests" > "$order"
else echo "$resources"/*_test.hs > "$order"
fi
for testfile in $(cat "$order"); do
    [ -f "$testfile" ] || continue
    testbase="$(basename "$testfile")"
    testname="${testbase%_test.hs}"
    tabtitle="$(echo "$testname" | tr '_' ' ')"

    # Compiling the test
    dodona start-tab -p staff -h -t "$tabtitle"
    cp "$testfile" src/Test.hs
    if ! ghc -i"$builddir" -outputdir "$builddir" -package-db "$pkgdb" -c src/Test.hs > "$compilation" 2>&1; then
        dodona start-context -f plain -d 'Compilatie'
        dodona append-message -f code -d "$(cat "$compilation")"
        dodona close-context -A
        dodona close-tab
        dodona close-judgement -A -e 'internal error' -h 'Testcompilatie gefaald'
        exit 0
    fi
    dodona close-tab

    # Running the test
    dodona start-tab -t "$tabtitle"
    set -e
    cd "$workdir"
    runghc -package-db --ghc-arg="$pkgdb" -i"$builddir":"$judge"/lib "$judge"/src/Test.hs
    cd "$judge"
    set +e
    dodona close-tab
done

dodona close-judgement
