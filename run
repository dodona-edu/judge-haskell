#!/bin/sh

# ==============================================================================
# Setup of environment

# Temp files
config="$(mktemp)"      # configuration
result="$(mktemp)"      # result json
compilation="$(mktemp)" # output of compilation

# Saving the configuration from stdin
cat > "$config"

# Directories containing the test files and the judge repository
resources="$(jshon -e 'resources' -u < "$config")"
judge="$(jshon -e 'judge' -u < "$config")"
workdir="$(jshon -e 'workdir' -u < "$config")"
builddir="$(jshon -e 'builddir' -u < "$config")"
builddir="${builddir:-/tmp/outputdir}"

# Compilation directory
mkdir -p "$builddir"

trap "rm -rf '$config' '$result' '$compilation' '$execution' '$builddir'" EXIT

# All our code should be executed in the workdir
cd "$workdir"

# Create the Input.hs module, containing the submitted code
echo "module Input where" > "Input.hs"
cat "$(jshon -e 'source' -u < "$config")" >> "Input.hs" 
cp "$(jshon -e 'helper' -u < "$config")" .  2>/dev/null

# ==============================================================================
# Helper functions for JSON generation

append_message() {
    jshon -Q -n object -s 'append-message' -i 'command'   \
                       -n object -s "$1" -i 'format'      \
                                 -s "$2" -i 'permission'  \
                                 -s "$3" -i 'description' \
                                 -i 'message'
}

# ==============================================================================
# Compiling and running tests.

# Let's get started
jshon -Q -n object -s 'start-judgement' -i 'command'

# Compiling the judge code
if ! cabal exec -- ghc -outputdir "$builddir" -i"$judge" "$judge/HUnitJudge.hs" > "$compilation" 2>&1; then
    append_message 'code' 'staff' "$(cat "$compilation")"
    jshon -Q -n object -s 'close-judgement' -i 'command' \
                       -n object -s 'internal error' -i 'enum' \
                                 -s 'Compilatie judge mislukt' -i 'human' \
                                 -i 'status' \
                       -n false -i 'accepted'
    exit 0
fi

if ! cabal exec -- ghc -outputdir "$builddir" -i"$judge" "$judge/QuickCheckJudge.hs" > "$compilation" 2>&1; then
    append_message 'code' 'staff' "$(cat "$compilation")"
    jshon -Q -n object -s 'close-judgement' -i 'command' \
                       -n object -s 'internal error' -i 'enum' \
                                 -s 'Compilatie judge mislukt' -i 'human' \
                                 -i 'status' \
                       -n false -i 'accepted'
    exit 0
fi

if ! cabal exec -- ghc -outputdir "$builddir" -o "$builddir/JSONLinter" -i"$judge" "$judge/JSONLinter.hs" > "$compilation" 2>&1; then
    append_message 'code' 'staff' "$(cat "$compilation")"
    jshon -Q -n object -s 'close-judgement' -i 'command' \
                       -n object -s 'internal error' -i 'enum' \
                                 -s 'Compilatie judge mislukt' -i 'human' \
                                 -i 'status' \
                       -n false -i 'accepted'
    exit 0
fi

"$builddir/JSONLinter" "Input.hs"

# Compiling the user code.
jshon -Q -n object -s 'start-tab' -i 'command' \
                   -s 'compilatie' -i 'title' \
                   -n true -i 'hidden'

jshon -Q -n object -s 'start-context' -i 'command' \
                   -n object -s "code" -i 'format' \
                             -s "ghc Input.hs" -i 'description' \
                             -i 'description'

if ! cabal exec -- ghc -outputdir "$builddir" "Input.hs" > "$compilation" 2>&1; then
    append_message 'code' 'student' "$(cat "$compilation")"
    jshon -Q -n object -s 'close-context' -i 'command' \
                       -n false -i 'accepted'
    jshon -Q -n object -s 'close-tab' -i 'command'
    jshon -Q -n object -s 'close-judgement' -i 'command' \
                       -n object -s 'compilation error' -i 'enum' \
                                 -s 'Compilatie mislukt' -i 'human' \
                                 -i 'status' \
                       -n false -i 'accepted'
    exit 0
fi

jshon -Q -n object -s 'close-context' -i 'command'
jshon -Q -n object -s 'close-tab' -i 'command'


# Compiling and running each test file.
find "$resources" -name '*_test.hs' | while read testfile; do
    testbase="$(basename "$testfile")"
    testname="${testbase%_test.hs}"
    tabtitle="$(echo "$testname" | tr '_' ' ')"

    jshon -Q -n object -s 'start-tab' -i 'command' \
                       -s "$tabtitle" -i 'title'

    # Compilation
    cp "$testfile" "$testbase"
    if ! cabal exec -- ghc -outputdir "$builddir" -i"$judge" "$testbase" -o runtest > "$compilation" 2>&1; then
        jshon -Q -n object -s 'start-context' -i 'command' \
                           -s 'Compilatie' -i 'description'
        append_message 'code' 'student' "$(cat "$compilation")"
        jshon -Q -n object -s 'close-context' -i 'command' \
                           -n false -i 'accepted'
        jshon -Q -n object -s 'close-tab' -i 'command'
        jshon -Q -n object -s 'close-judgement' -i 'command' \
                           -n object -s 'compilation error' -i 'enum' \
                                     -s 'Interface niet voldaan' -i 'human' \
                                     -i 'status' \
                           -n false -i 'accepted'
        exit 0
    fi
    rm "$testbase"

    # Running the test
    set -e
    ./runtest
    set +e

    # Cleanup
    rm runtest

    jshon -Q -n object -s 'close-tab' -i 'command'
done

jshon -Q -n object -s 'close-judgement' -i 'command'

