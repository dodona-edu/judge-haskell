#!/bin/sh

# ==============================================================================
# Setup of environment

# Temp files
config="$(mktemp)"      # configuration
order="$(mktemp)"       # order
compilation="$(mktemp)" # output of compilation

# Saving the configuration from stdin
cat > "$config"

# Directories containing the test files and the judge repository
resources="$(jshon -e 'resources' -u < "$config")"
judge="$(jshon -e 'judge' -u < "$config")"
workdir="$(jshon -e 'workdir' -u < "$config")"
builddir="$workdir"

trap "rm -rf '$config' '$order' '$compilation' '$execution' '$STACK_WORK'" EXIT

# ==============================================================================
# Helper functions for JSON generation

append_message() {
    jshon -Q -n object -s 'append-message' -i 'command'   \
                       -n object -s "$1" -i 'format'      \
                                 -s "$2" -i 'permission'  \
                                 -s "$3" -i 'description' \
                                 -i 'message'
}

# ==============================================================================
# Compiling and running tests.

# Let's get started
jshon -Q -n object -s 'start-judgement' -i 'command'

# Compiling the judge code
cd "$judge"

if ! cabal install --installdir="." -j1 --offline > "$compilation" 2>&1; then
    append_message 'code' 'staff' "$(cat "$compilation")"
    jshon -Q -n object -s 'close-judgement' -i 'command' \
                       -n object -s 'internal error' -i 'enum' \
                                 -s 'Compilatie judge mislukt' -i 'human' \
                                 -i 'status' \
                       -n false -i 'accepted'
    exit 0
fi

# Create the Input.hs module, containing the submitted code
cat "$(jshon -e 'source' -u < "$config")" >> lib/Input.hs
cp "$(jshon -e 'helper' -u < "$config")" .  2>/dev/null

# Lint the user code.
./jsonlinter lib/Input.hs

# Compiling the user code.
jshon -Q -n object -s 'start-tab' -i 'command' \
                   -s 'compilatie' -i 'title' \
                   -n true -i 'hidden'

jshon -Q -n object -s 'start-context' -i 'command' \
                   -n object -s "code" -i 'format' \
                             -s "ghc Input.hs" -i 'description' \
                             -i 'description'

if ! cabal build -j1 --offline > "$compilation" 2>&1; then
    append_message 'code' 'student' "$(cat "$compilation")"
    jshon -Q -n object -s 'close-context' -i 'command' \
                       -n false -i 'accepted'
    jshon -Q -n object -s 'close-tab' -i 'command'
    jshon -Q -n object -s 'close-judgement' -i 'command' \
                       -n object -s 'compilation error' -i 'enum' \
                                 -s 'Compilatie mislukt' -i 'human' \
                                 -i 'status' \
                       -n false -i 'accepted'
    exit 0
fi

jshon -Q -n object -s 'close-context' -i 'command'
jshon -Q -n object -s 'close-tab' -i 'command'

if [ -f "$resources/typecheck.hs" ]; then
    jshon -Q -n object -s 'start-tab' -i 'command' \
                       -s "Typecheck" -i 'title' \
                       -n true -i 'hidden'

    cat "$resources/typecheck.hs" >> lib/Typecheck.hs
    if ! cabal build -j1 --offline > "$compilation" 2>&1; then
        jshon -Q -n object -s 'start-context' -i 'command' \
                           -s 'Compilatie' -i 'description'
        append_message 'code' 'student' "$(cat "$compilation")"
        jshon -Q -n object -s 'close-context' -i 'command' \
                           -n false -i 'accepted'
        jshon -Q -n object -s 'close-tab' -i 'command'
        jshon -Q -n object -s 'close-judgement' -i 'command' \
                           -n object -s 'compilation error' -i 'enum' \
                                     -s 'Interface niet voldaan' -i 'human' \
                                     -i 'status' \
                           -n false -i 'accepted'
        exit 0
    fi

    jshon -Q -n object -s 'close-tab' -i 'command'
fi

# Compiling and running each test file.
if [ -f "$resources/ordered_tests" ]
then sed "s|^|$resources/|" < "$resources/ordered_tests" > "$order"
else echo "$resources"/*_test.hs > "$order"
fi
for testfile in $(cat "$order"); do
    [ -f "$testfile" ] || continue
    testbase="$(basename "$testfile")"
    testname="${testbase%_test.hs}"
    tabtitle="$(echo "$testname" | tr '_' ' ')"

    # Compiling the test

    jshon -Q -n object -s 'start-tab' -i 'command' \
                       -s "$tabtitle" -i 'title' \
                       -s 'staff' -i 'permission' \
                       -n true -i 'hidden'

    cp "$testfile" src/Test.hs
    if ! cabal install -j1 --installdir="$workdir" --offline test > "$compilation" 2>&1; then
        jshon -Q -n object -s 'start-context' -i 'command' \
                           -s 'Compilatie' -i 'description'
        append_message 'code' 'student' "$(cat "$compilation")"
        jshon -Q -n object -s 'close-context' -i 'command' \
                           -n false -i 'accepted'
        jshon -Q -n object -s 'close-tab' -i 'command'
        jshon -Q -n object -s 'close-judgement' -i 'command' \
                           -n object -s 'internal error' -i 'enum' \
                                     -s 'Testcompilatie gefaald' -i 'human' \
                                     -i 'status' \
                           -n false -i 'accepted'
        exit 0
    fi

    jshon -Q -n object -s 'close-tab' -i 'command'

    # Running the test

    jshon -Q -n object -s 'start-tab' -i 'command' \
                       -s "$tabtitle" -i 'title'

    set -e
    cd "$workdir"
    ./test
    cd "$judge"
    set +e

    jshon -Q -n object -s 'close-tab' -i 'command'
done

jshon -Q -n object -s 'close-judgement' -i 'command'
