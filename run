#!/bin/bash

# ==============================================================================
# Setup of environment

# Temp files
config="$(mktemp)"      # configuration
result="$(mktemp)"      # result json
compilation="$(mktemp)" # output of compilation

# Saving the configuration from stdin
cat > "$config"

# Directories containing the test files and the judge repository
resources="$(jshon -e 'resources' -u < "$config")"
judge="$(jshon -e 'judge' -u < "$config")"
workdir="$(jshon -e 'workdir' -u < "$config")"
builddir="$(jshon -e 'builddir' -u < "$config")"
builddir="${builddir:-/tmp/outputdir}"

# Compilation directory
mkdir -p "$builddir"

trap "rm -rf '$config' '$result' '$compilation' '$execution' '$builddir'" EXIT

# All our code should be executed in the workdir
cd "$workdir"

# Create the Input.hs module, containing the submitted code
echo "module Input where" > "Input.hs"
cat "$(jshon -e 'source' -u < "$config")" >> "Input.hs" 

# ==============================================================================
# Helper functions for JSON generation

compilation_error() {
    jshon -Q -n object -s 'focus-relative' -i 'command' \
                       -s 'root' -i 'level'
    jshon -Q -n object -s 'set-properties' -i 'command'   \
                       -s 'compilation error' -i 'status' \
                       -s "$1" -i 'description'           \
                       -n false -i 'accepted'
}

append_message() {
    jshon -Q -n object -s 'append-message' -i 'command'   \
                       -n object -s "$1" -i 'format'      \
                                 -s "$2" -i 'permission'  \
                                 -s "$3" -i 'description' \
                                 -i 'message'
}

# ==============================================================================
# Compiling and running tests.

# Compiling the judge code
if ! cabal exec -- ghc -outputdir "$builddir" -i"$judge" "$judge/HJudge.hs" > "$compilation" 2>&1; then
    jshon -Q -n object -s 'set-properties' -i 'command'               \
                       -s 'internal error' -i 'status'                \
                       -s 'Compilatie judge mislukt' -i 'description' \
                       -n false -i 'accepted'
    append_message 'code' 'staff' "$(cat "$compilation")"
    exit 0
fi

# In the beginning, we assume the code will time out.
jshon -Q -n object -s 'set-properties' -i 'command'               \
                   -s 'time limit exceeded' -i 'status'           \
                   -s 'Tijdslimiet overschreden' -i 'description' \
                   -n false -i 'accepted'

# Compiling the user code.
if ! cabal exec -- ghc -outputdir "$builddir" "Input.hs" > "$compilation" 2>&1; then
    compilation_error "Compilatie mislukt"
    jshon -Q -n object -s 'new-tab' -i 'command'
    jshon -Q -n object -s 'set-properties' -i 'command' \
                       -s 'Compilatie' -i 'description' \
                       -n false -i 'accepted'
    append_message 'code' 'student' "$(cat "$compilation")"
    exit 0
fi

# Compiling and running each test file.
failed_tabs="0"
while read testfile; do
    testbase="$(basename "$testfile")"
    testname="${testbase%_test.hs}"
    tabtitle="${testname//_/ }"

    jshon -Q -n object -s 'new-tab' -i 'command'
    jshon -Q -n object -s 'set-properties' -i 'command' \
                       -s "$tabtitle" -i 'description'

    # Compilation
    cp "$testfile" "$testbase"
    if ! cabal exec -- ghc -outputdir "$builddir" -i"$judge" "$testbase" -o runtest > "$compilation" 2>&1; then
        append_message 'code' 'student' "$(cat "$compilation")"
        compilation_error "Interface onvoldaan"
        exit 0
    fi
    rm "$testbase"

    # Running the test
    ./runtest || failed_tabs="$((failed_tabs + 1))"

    # Cleanup
    rm runtest
done < <(find "$resources" -name '*_test.hs')

if (( failed_tabs == 0 )); then
    jshon -Q -n object -s 'focus-relative' -i 'command' \
                       -s 'root' -i 'level'
    jshon -Q -n object -s 'set-properties' -i 'command' \
                       -s 'correct' -i 'status'         \
                       -s "Correct" -i 'description'    \
                       -n true -i 'accepted'
else
    jshon -Q -n object -s 'focus-relative' -i 'command' \
                       -s 'root' -i 'level'
    jshon -Q -n object -s 'set-properties' -i 'command' \
                       -s 'wrong' -i 'status'         \
                       -s "Fout" -i 'description'    \
                       -n false -i 'accepted'
fi

